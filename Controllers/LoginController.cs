using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Microsoft.AspNetCore.Identity;
using Microsoft.AspNetCore.Http;
using Microsoft.EntityFrameworkCore;

using BryantCornerCafe.Models;

namespace BryantCornerCafe.Controllers
{
    public class LoginController : Controller
    {
        private BryantCornerCafeContext db;
        public LoginController(BryantCornerCafeContext context)
        {
            db = context;
        }

        private int? uid
        {
            get
            {
                ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                // HttpContext.Session.SetInt32("UserId", 1); ////////////////////////////////////////////////////////////////////delete this 4 deployment!
                /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
                return HttpContext.Session.GetInt32("UserId");
            }
        }

        private bool isLoggedIn
        {
            get
            {
                return uid != null;
            }
        }

        [HttpGet("")]
        public IActionResult LoginRegPage()
        {
            
            return View("Index");
        }


        [HttpGet("/loginpage")]
        public IActionResult LoginPage()
        {
            
            return View("_Login");
        }

        [HttpGet("/registerpage")]
        public IActionResult RegisterPage()
        {
            
            return View("_Register");
        }

        [HttpGet("/register")]
        public IActionResult Register(User newUser)
        {
            if (ModelState.IsValid)
            {
                //verify email not in use
                bool emailInUse = db.Users.Any(u => u.Email == newUser.Email);
                if(emailInUse)
                {
                    ModelState.AddModelError("Email", "This Username/Email is already taken");
                    Console.WriteLine("ougabooga");
                }
            }

            /*
            check to make sure the conditions above invalidate the model state 
            and return all the errors at once
            */
            if (ModelState.IsValid == false)
            {
                /* 
                Send back to the page with the form so error messages are
                displayed with the filled in input data.
                */
                return View("Index");
            }


            //hash password
            PasswordHasher<User> hasher = new PasswordHasher<User>();
            newUser.Password = hasher.HashPassword(newUser, newUser.Password);
            /* 
            This Add method auto generates SQL code:
            INSERT INTO ModelName (Custom Properties, CreatedAt, UpdatedAt)
            */
            db.Users.Add(newUser); 
            // db doesn't update until we run save changes
            // After SaveChanges, our object now has it's ModelNameId from the db (autogenerated!).
            db.SaveChanges();
            
            HttpContext.Session.SetInt32("UserId", newUser.UserId);
            HttpContext.Session.SetString("FullName", newUser.FullName());
            return RedirectToAction("Dashboard");
        }


        // [HttpPost("Login")]
        // public IActionResult Login(LoginUser LoginUser)
        // {
        //     string genericErrMsg = "Invalid Email or Password";

        //     if (ModelState.IsValid == false)
        //     {
        //         /* 
        //         Send back to the page with the form so error messages are
        //         displayed with the filled in input data.
        //         */
        //         return View("Index");
        //     }

        //     //find user attached to the email address used to log in
        //     User LoggedInUser = db.Users.FirstOrDefault(p => p.Email == LoginUser.LoginEmail);

        //     if (LoggedInUser == null)
        //     {
        //         ModelState.AddModelError("LoginEmail", genericErrMsg);
        //         Console.WriteLine(new String('*', 30) + "Login: Email not found");

        //         return View("Index");
        //     }
            
        //     //User found b/c the above did not return
        //     PasswordHasher<LoginUser> hasher = new PasswordHasher<LoginUser>();
        //     PasswordVerificationResult ComparePasswords = hasher.VerifyHashedPassword(LoginUser, LoggedInUser.Password, LoginUser.LoginPassword);

        //     if(ComparePasswords == 0)
        //     {
        //         ModelState.AddModelError("LoginEmail", genericErrMsg);
        //         return View("Index");
        //     }
        //     HttpContext.Session.SetInt32("UserId", LoggedInUser.UserId);
        //     HttpContext.Session.SetString("FullName", LoggedInUser.FullName());

        //     return RedirectToAction("Dashboard");
        // }
        // [HttpGet("logout")]
        // public IActionResult Logout()
        // {
        //     HttpContext.Session.Clear();
        //     return RedirectToAction("Index");
        // }

//============================================================================================================================================================================
//============================================================================================================================================================================
//============================================================================================================================================================================


    }
}